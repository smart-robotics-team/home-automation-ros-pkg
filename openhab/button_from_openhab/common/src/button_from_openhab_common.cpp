// ROS message includes
#include "ros/ros.h"
#include <std_msgs/Empty.h>
#include <std_msgs/Empty.h>
#include <std_msgs/Bool.h>
#include <diagnostic_msgs/KeyValue.h>

/* protected region user include files on begin */
/* protected region user include files end */

class button_from_openhab_config
{
public:
    std::string key;
    std::string value_on;
    std::string value_off;
};

class button_from_openhab_data
{
// autogenerated: don't touch this class
public:
    //input data
    diagnostic_msgs::KeyValue in_input;
    //output data
    std_msgs::Empty out_emptyON;
    bool out_emptyON_active;
    std_msgs::Empty out_emptyOFF;
    bool out_emptyOFF_active;
    std_msgs::Bool out_bool;
    bool out_bool_active;
};

class button_from_openhab_impl
{
    /* protected region user member variables on begin */
	button_from_openhab_config local_config;

	bool out_on;
	bool out_off;
    /* protected region user member variables end */

public:
    button_from_openhab_impl() 
    {
        /* protected region user constructor on begin */
    	out_on = false;
    	out_off = false;
        /* protected region user constructor end */
    }

    void configure(button_from_openhab_config config) 
    {
        /* protected region user configure on begin */
    	local_config = config;
        /* protected region user configure end */
    }

    void update(button_from_openhab_data &data, button_from_openhab_config config)
    {
        /* protected region user update on begin */
    	data.out_bool_active = out_on | out_off;
    	data.out_emptyOFF_active = out_off;
    	data.out_emptyON_active = out_on;
    	if(out_on)
    	{
    		data.out_bool.data = true;
    		out_on = false;
    	}
    	else if(out_off)
    	{
    		data.out_bool.data = false;
    		out_off = false;
    	}
        /* protected region user update end */
    }

    void topicCallback_input(const diagnostic_msgs::KeyValue::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
    	if(msg->key.compare(local_config.key) == 0) // This is the correct key
    	{
    		if(msg->value.compare(local_config.value_on) == 0) // This is the ON value
			{
    			out_on = true;
			}
    		else if(msg->value.compare(local_config.value_off) == 0) // This is the OFF value
			{
    			out_off = true;
			}
    	}
        /* protected region user implementation of subscribe callback for input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
