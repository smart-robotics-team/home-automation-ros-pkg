// ROS message includes
#include "ros/ros.h"
#include <std_msgs/Float32.h>
#include <diagnostic_msgs/KeyValue.h>

/* protected region user include files on begin */
/* protected region user include files end */

class float_from_openhab_config
{
public:
    std::string key;
};

class float_from_openhab_data
{
// autogenerated: don't touch this class
public:
    //input data
    diagnostic_msgs::KeyValue in_input;
    //output data
    std_msgs::Float32 out_float;
    bool out_float_active;
};

class float_from_openhab_impl
{
    /* protected region user member variables on begin */
	float_from_openhab_config local_config;

	bool out_on;
	double value_out;
    /* protected region user member variables end */

public:
    float_from_openhab_impl() 
    {
        /* protected region user constructor on begin */
    	out_on = false;
    	value_out = 0.0;
        /* protected region user constructor end */
    }

    void configure(float_from_openhab_config config) 
    {
        /* protected region user configure on begin */
    	local_config = config;
        /* protected region user configure end */
    }

    void update(float_from_openhab_data &data, float_from_openhab_config config)
    {
        /* protected region user update on begin */
    	data.out_float_active = out_on;
		if(out_on)
		{
			data.out_float.data = value_out;
			out_on = false;
		}
        /* protected region user update end */
    }

    void topicCallback_input(const diagnostic_msgs::KeyValue::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
    	if(msg->key.compare(local_config.key) == 0) // This is the correct key
    	{
    		value_out = atof(msg->value.c_str());
    		out_on = true;
    	}
        /* protected region user implementation of subscribe callback for input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
